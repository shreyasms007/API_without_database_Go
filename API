package main

import (
	"encoding/json"
	"fmt"
	"log"
	"math/rand"
	"net/http"
	"strconv"

	"github.com/gorilla/mux"
)

type Payload struct {
	ID           string `json:"id"`
	Status       string `json:"status"`
	Items        *Items `json:"items"`
	Total        int    `json:"total"`
	CurrencyUnit string `json:"currency_unit"`
}

type Items struct {
	Id          string `json:"id"`
	Description string `json:"description"`
	Price       int    `json:"price"`
	Quantity    int    `json:"quantity"`
}

var payload []Payload

func getOrders(w http.ResponseWriter, r *http.Request) {
	w.Header().Set("Content-Type", "application/json")
	json.NewEncoder(w).Encode(payload)

}

func deleteOrder(w http.ResponseWriter, r *http.Request) {
	w.Header().Set("Content-Type", "application/json")
	params := mux.Vars(r)
	for index, item := range payload {
		if item.ID == params["id"] {
			payload = append(payload[:index], payload[index+1:]...)
			break
		}
	}
	json.NewEncoder(w).Encode(payload)
}

func getOrder(w http.ResponseWriter, r *http.Request) {
	w.Header().Set("Content-Type", "applicaton/json")
	params := mux.Vars(r)
	for index, item := range payload {
		if item.ID == params["id"] {
			payload = append(payload[:index], payload[index+1:]...)
			json.NewEncoder(w).Encode(item)

		}
	}
}

func createOrder(w http.ResponseWriter, r *http.Request) {
	w.Header().Set("Content-Type", "applicaton/json")
	var movie Payload
	_ = json.NewDecoder(r.Body).Decode(&movie)
	movie.ID = strconv.Itoa(rand.Intn(1000000000))
	payload = append(payload, movie)
	json.NewEncoder(w).Encode(movie)
}

func updateOrder(w http.ResponseWriter, r *http.Request) {
	w.Header().Set("Content-Type", "applicaton/json")
	params := mux.Vars(r)
	for index, item := range payload {
		if item.ID == params["id"] {
			payload = append(payload[:index], payload[index+1:]...)
			var movie Payload
			_ = json.NewDecoder(r.Body).Decode(&movie)
			movie.ID = params["id"]
			payload = append(payload, movie)
			json.NewEncoder(w).Encode(movie)
		}
	}

}

func main() {

	r := mux.NewRouter()

	payload = append(payload, Payload{ID: "abcde-12345", Status: "ordered", Items: &Items{Id: "123456", Description: "Toy", Price: 40, Quantity: 1}, Total: 40, CurrencyUnit: "dollar"})
	payload = append(payload, Payload{ID: "vwxyz-08976", Status: "shipped", Items: &Items{Id: "09876", Description: "Mobile", Price: 206, Quantity: 1}, Total: 206, CurrencyUnit: "dollar"})

	r.HandleFunc("/orders", getOrders).Methods("GET")
	r.HandleFunc("/orders/{id}", getOrder).Methods("GET")
	r.HandleFunc("/orders", createOrder).Methods("POST")
	r.HandleFunc("/orders/{id}", updateOrder).Methods("PUT")
	r.HandleFunc("/orders/{id}", deleteOrder).Methods("DELETE")

	fmt.Println("Server is started at port 8080")
	log.Fatal(http.ListenAndServe(":8080", r))

}
